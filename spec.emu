<!doctype html>
<meta charset="utf8">
<link rel="stylesheet" href="./spec.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<script src="./spec.js"></script>
<pre class="metadata">
title: Error.captureStackTrace
stage: 1
contributors: Daniel Minor
markEffects: true
</pre>

<emu-intro id="intro">
  <h1>Introduction</h1>
  <p></p>
</emu-intro>

<emu-clause id="sec-agents">
  <h1>Agents</h1>

  <emu-table id="table-agent-record" caption="Agent Record Fields">
    <table>
      <thead>
        <tr>
          <th>Field Name</th>
          <th>Value</th>
          <th>Meaning</th>
        </tr>
      </thead>
      <tr>
        <td>[[ErrorCaptureStackTraceStrategy]]</td>
        <td>DATAPROPERTY or ACCESSOR</td>
        <td>Whether to use a data property or an accessor property for the "stack" property installed by Error.captureStackTrace.</td>
      </tr>
    </table>
  </emu-table>

  <p>Once the values of [[Signifier]], [[IsLockFree1]], [[IsLockFree2]], and [[UseErrorCaptureStackTraceDataProperty]] have been observed by any agent in the agent cluster they cannot change.</p>
</emu-clause>

<emu-clause id="sec-agent-clusters">
  <h1>Agent Clusters</h1>

  <p>All agents within a cluster must have the same value for the [[UseErrorCaptureStackTraceDataProperty]] field in their respective Agent Records.</p>
</emu-clause>

<emu-clause id="sec-fundamental-objects" number="20">
  <h1>Fundamental Objects</h1>

  <emu-clause id="sec-error-objects" number="5">
    <h1>Error Objects</h1>

    <emu-clause id="sec-properties-of-the-error-constructor" number="2">
      <h1>Properties of the Error Constructor</h1>

      <emu-clause id="sec-error.capturestacktrace">
        <h1>Error.captureStackTrace ( _error_ [ , _constructor_ ] )</h1>
        <emu-alg>
          1. If _error_ is not an Object, throw a *TypeError* exception.
          1. If IsCallable(_constructor_) is *true*, then
            1. Let _string_ be an implementation-defined string that represents the current stack trace, with all stack
               frames above the topmost call to _constructor_, including that call, omitted from the stack trace.
            1. NOTE: This can be used to hide implementation details on the stack trace that aren't useful to user.
          1. Else,
            1. Let _string_ be an implementation-defined string that represents the current stack trace.
          1. Let _strategy_ be the value of the [[ErrorCaptureStackTraceStrategy]] field of the surrounding agent's Agent Record.
          1. If _strategy_ is DATAPROPERTY, then
            1. Perform ? SetterThatIgnoresPrototypeProperties(_error_, OrdinaryObjectCreate(*null*), *"stack"*, _string_)..
          1. Else,
            1. Assert: _strategy_ is ACCESSOR.
            1. If ? IsExtensible(_error_) is *false*, throw a *TypeError* exception.
            1. Let _getterClosure_ be a new Abstract Closure with no parameters that captures _string_ and performs the following steps when called:
              1. Return NormalCompletion(_string_).
            1. Let _getter_ be CreateBuiltinFunction(_getterClosure_, 0, "", « »).
            1. Let _setterClosure_ be a new Abstract Closure with parameters (_value_) that captures _error_ and performs the following steps when called:
              1. Perform ? SetterThatIgnoresPrototypeProperties(_error_, *null*, *"stack"*, _value_).
              1. Return NormalCompletion(*undefined*).
            1. Let _setter_ be CreateBuiltinFunction(_setterClosure_, 1, "", « »).
            1. Perform ! OrdinaryDefineOwnProperty(_error_, *"stack"*, PropertyDescriptor { [[Get]]: _getter_, [[Set]]: _setter_, [[Enumerable]]: false, [[Configurable]]: true }).
          1. Return *undefined*.
        </emu-alg>
      </emu-clause>
    </emu-clause>
  </emu-clause>
</emu-clause>
