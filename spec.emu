<!doctype html>
<meta charset="utf8">
<link rel="stylesheet" href="./spec.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<script src="./spec.js"></script>
<pre class="metadata">
title: Error.captureStackTrace
stage: 1
contributors: Daniel Minor
markEffects: true
</pre>

<emu-intro id="intro">
  <h1>Introduction</h1>
  <p></p>
</emu-intro>

<emu-clause id="sec-code-realms">
  <h1>Realms</h1>
  <emu-table id="table-realm-record-fields" caption="Realm Record Fields" oldids="table-21">
    <table>
      <thead>
        <tr>
          <th>
            Field Name
          </th>
          <th>
            Value
          </th>
          <th>
            Meaning
          </th>
        </tr>
      </thead>
      <tr>
        <td>[[ErrorCaptureStackTraceStrategy]]</td>
        <td>~data-property~ or ~accessor~</td>
        <td>Whether to use a data property or an accessor property for the "stack" property installed by Error.captureStackTrace.</td>
      </tr>
    </table>
  </emu-table>
</emu-clause>

<emu-clause id="sec-well-known-intrinsic-objects">
  <h1>Well-Known Intrinsic Objects</h1>

  <emu-table id="table-well-known-intrinsic-objects" caption="Well-Known Intrinsic Objects" oldids="table-7">
    <table>
      <thead>
        <tr>
          <th>
            Intrinsic Name
          </th>
          <th>
            Global Name
          </th>
          <th>
            ECMAScript Language Association
          </th>
        </tr>
      </thead>
      <tr>
        <td>
          %ErrorCaptureStackTraceGetter%
        </td>
        <td>
        </td>
        <td>
          The getter installed by `Error.captureStackTrace` (<emu-xref href="#sec-error.capturestacktrace-getter"></emu-xref>)
        </td>
      </tr>
      <tr>
        <td>
          %ErrorCaptureStackTraceSetter%
        </td>
        <td>
        </td>
        <td>
          The setter installed by `Error.captureStackTrace` (<emu-xref href="#sec-error.capturestacktrace-setter"></emu-xref>)
        </td>
      </tr>
    </table>
  </emu-table>
</emu-clause>

<emu-clause id="sec-fundamental-objects" number="20">
  <h1>Fundamental Objects</h1>

  <emu-clause id="sec-error-objects" number="5">
    <h1>Error Objects</h1>

    <emu-clause id="sec-properties-of-the-error-constructor" number="2">
      <h1>Properties of the Error Constructor</h1>

      <emu-clause id="sec-error.capturestacktrace">
        <h1>Error.captureStackTrace ( _O_ [ , _limit_ ] )</h1>
        <emu-alg>
          1. If _O_ is not an Object, throw a *TypeError* exception.
          1. If IsCallable(_limit_) is *true*, then
            1. Let _string_ be an implementation-defined string that represents the current stack trace, with all stack
               frames above the topmost call to _limit_, including that call, omitted from the stack trace.
            1. NOTE: This can be used to hide implementation details on the stack trace that aren't useful to user.
          1. Else,
            1. Let _string_ be an implementation-defined string that represents the current stack trace.
          1. Let _realm_ be the current Realm Record.
          1. Let _strategy_ be _realm_.[[ErrorCaptureStackTraceStrategy]].
          1. If _strategy_ is ~data-property~, then
            1. Perform ? DefinePropertyOrThrow(_O_, *"stack"*, PropertyDescriptor { [[Value]]: _string_, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }).
          1. Else,
            1. Assert: _strategy_ is ~accessor~.
            1. If ? IsExtensible(_O_) is *false*, throw a *TypeError* exception.
            1. Define a new [[StackTrace]] internal slot on _O_.
            1. Perform ? DefinePropertyOrThrow(_O_, *"stack"*, PropertyDescriptor { [[Get]]: %ErrorCaptureStackTraceGetter%, [[Set]]: %ErrorCaptureStackTraceSetter%, [[Enumerable]]: false, [[Configurable]]: true }).
          1. Return *undefined*.
        </emu-alg>
      </emu-clause>
      <emu-clause id="sec-error.capturestacktrace-getter">
        <h1>%ErrorCaptureStackTraceGetter% ( )</h1>
        <p>The value of %ErrorCaptureStackTraceGetter% is a built-in function that takes no arguments. It performs the following steps when called:</p>
        <emu-alg>
          1. Let _O_ be the *this* value.
          1. If _O_ has a [[StackTrace]] internal slot, then
            1. Return _O_.[[StackTrace]].
          1. Else,
            1. Return *undefined*.
        </emu-alg>
      </emu-clause>
      <emu-clause id="sec-error.capturestacktrace-setter">
        <h1>%ErrorCaptureStackTraceSetter% ( _value_ )</h1>
        <p>The value of %ErrorCaptureStackTraceSetter% is a built-in function that takes an argument _value_. It performs the following steps when called:</p>
        <emu-alg>
            1. Perform ? DefinePropertyOrThrow(*this* value, *"stack"*, PropertyDescriptor { [[Value]]: _value_, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true }).
            1. Return *undefined*.
        </emu-alg>
      </emu-clause>
    </emu-clause>
  </emu-clause>
</emu-clause>
